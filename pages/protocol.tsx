import type { NextPage } from 'next'
import Head from 'next/head'
import Image from 'next/image'
import { Dispatch, useState, useEffect } from 'react'
import { ZDK, ZDKNetwork, ZDKChain } from "@zoralabs/zdk";
import { NFTPreview, MediaConfiguration } from '@zoralabs/nft-components';
import { Networks, Strategies } from "@zoralabs/nft-hooks"

import { useAccount } from 'wagmi'

import { Header } from '../components/Header'
import { Footer } from '../components/Footer'
import NFTCard from '../components/NFTCard';
import AskRead_disclosure from "../components/AskRead_disclosure"
import AskWrite_disclosure from '../components/AskWrite_disclosure';


const networkInfo = {
  network: ZDKNetwork.Ethereum,
  chain: ZDKChain.Mainnet,
}

const API_ENDPOINT = "https://api.zora.co/graphql";
const zdkArgs = { 
  endPoint: API_ENDPOINT, 
  networks: [networkInfo], 
} 

const zdk = new ZDK(zdkArgs) // All arguments are optional  

const zdkStrategyMainnet = new Strategies.ZDKFetchStrategy(
  Networks.MAINNET
)

const Protocol: NextPage = () => {

  interface nftInfo {
    contractAddress: string,
    tokenId: string
  }

  const [ asksNFT, setAsksNFT] = useState<nftInfo>({
    "contractAddress": "0x7e6663E45Ae5689b313e6498D22B041f4283c88A",
    "tokenId": "1"
  })

  const [ offersNFT, setOffersNFT] = useState<nftInfo>({
    "contractAddress": "0x7e6663E45Ae5689b313e6498D22B041f4283c88A",
    "tokenId": "2"
  })

  const [ auctionsNFT, setAuctionsNFT] = useState<nftInfo>({
    "contractAddress": "0x7e6663E45Ae5689b313e6498D22B041f4283c88A",
    "tokenId": "3"
  })

  return (
    <div className='flex flex-col justify-center h-full min-h-screen'>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Header />
      <main className="border-2 border-white border-solid text-white grid grid-cols-3 h-fit">        
        
        {/* ASKS MODULE */}
        {/* ASKS MODULE */}
        {/* ASKS MODULE */}

        <div className='mt-10 flex flex-row flex-wrap content-start'>
          <div className='h-fit content-start flex flex-row flex-wrap w-full'>
            <div className="text-2xl h-fit w-full flex flex-row justify-center">            
              ASKS MODULE
            </div>
            <div className=" justify-center border-2 border-white border-solid flex flex-row h-fit w-full">
              LIST AND BUY NFTs FOR A SPECIFIC PRICE
            </div>
            <div className="grid grid-cols-3 border-2 boreder-yellow-500 border-solid w-full" >
              <a className="text-center">
                DOCS
              </a>
              <a className="text-center">
                REPO
              </a>
              <a className="text-center">
                ETHERSCAN
              </a>
            </div>
          </div>

          {/* NFT RENDERING + CONTRACT INPUTS */}
          <div className=" w-full h-fit flex flex-row flex-wrap justify-center "> 
            <MediaConfiguration
              networkId="1"                        
              strategy={zdkStrategyMainnet}
              strings={{
                CARD_OWNED_BY: "",
                CARD_CREATED_BY: "",                           
              }}
              style={{
                theme: {
                  previewCard: {
                    background: "black",
                    height: "200px",
                    width: "200px"                                    
                  },
                  defaultBorderRadius: 0,
                  lineSpacing: 0,
                  textBlockPadding: "0"                
                },              
              }}
            >
              <NFTPreview
                contract={asksNFT.contractAddress}
                id={asksNFT.tokenId}
                showBids={false}
                showPerpetual={false}
              />
            </MediaConfiguration> 
            <div className="w-full flex flex-row flex-wrap justify-center">
              <div className="justify-center flex flex-row w-full">
                <div>
                  CONTRACT ADDRESS
                </div>
                <input
                  className="border-[1px] border-solid border-black ml-5 text-black text-center bg-slate-200"
                  placeholder="Input NFT Address"
                  name="inputContract"
                  type="text"
                  value={asksNFT.contractAddress}
                  onChange={(e) => {
                      e.preventDefault();
                      setAsksNFT(current => {
                        return {
                          ...current,
                          contractAddress: e.target.value
                        }
                      })
                  }}
                  required                    
                >
                </input>
              </div>
              <div className="justify-center flex flex-row w-full">
                <div>
                  TOKEN ID
                </div>
                <input
                  className="border-[1px] border-solid border-black ml-5 text-black text-center bg-slate-200"
                  placeholder="Input Token Id "
                  name="inputContract"
                  type="text"
                  value={asksNFT.tokenId}
                  onChange={(e) => {
                      e.preventDefault();
                      setAsksNFT(current => {
                        return {
                          ...current,
                          tokenId: e.target.value
                        }
                      })
                  }}
                  required                    
                >
                </input>
              </div>
            </div>                   
          </div>

          <div className="mt-5 flex flex-row flex-wrap w-full ">
            <div className="w-full">
              <div className="ml-2 mb-2 text-xl">
                ASK MODULE READS
              </div>
              <AskRead_disclosure nft={asksNFT} />
              {/* <AskForNFT_READ nft={asksNFT} /> */}
            </div>
          </div>
          <div className="mt-5 flex flex-row flex-wrap w-full ">
            <div className="flex flex-row flex-wrap w-full">
              <div className="ml-2 mb-2 text-xl">
                ASK MODULE WRITES
              </div>
              <AskWrite_disclosure nft={asksNFT} />
            </div>
          </div>
        </div>

        {/* OFFERS MODULE */}
        {/* OFFERS MODULE */}
        {/* OFFERS MODULE */}

        <div className='mt-10 border-2 border-yellow-500 border-solid'>
          <div className='h-fit content-start border-2 border-blue-500 border-solid flex flex-row flex-wrap w-full'>
            <div className="text-2xl border-2 border-red-500 border-solid h-fit w-full flex flex-row justify-center">            
              OFFERS MODULE
            </div>
            <div className=" justify-center border-2 border-white border-solid flex flex-row h-fit w-full">
              MAKE/RECEIVE OFFERS ON NFTs
            </div>
            <div className="grid grid-cols-3 border-2 boreder-yellow-500 border-solid w-full" >
              <a className="text-center">
                DOCS
              </a>
              <a className="text-center">
                REPO
              </a>
              <a className="text-center">
                ETHERSCAN
              </a>
            </div>
          </div>

          {/* NFT RENDERING + CONTRACT INPUTS */}
          <div className="border-2 border-solid border-blue-500 w-full h-fit flex flex-row flex-wrap justify-center "> 
            <MediaConfiguration
              networkId="1"                        
              strategy={zdkStrategyMainnet}
              strings={{
                CARD_OWNED_BY: "",
                CARD_CREATED_BY: "",                           
              }}
              style={{
                theme: {
                  previewCard: {
                    background: "black",
                    height: "200px",
                    width: "200px"                                    
                  },
                  defaultBorderRadius: 0,
                  lineSpacing: 0,
                  textBlockPadding: "0"                
                },              
              }}
            >
              <NFTPreview
                contract={offersNFT.contractAddress}
                id={offersNFT.tokenId}
                showBids={false}
                showPerpetual={false}
              />
            </MediaConfiguration> 
            <div className="w-full flex flex-row flex-wrap justify-center">
              <div className="justify-center flex flex-row w-full border-2 border-red-500 border-soli">
                <div>
                  CONTRACT ADDRESS
                </div>
                <input
                  className="ml-5 text-black text-center bg-slate-200"
                  placeholder="Input NFT Address"
                  name="inputContract"
                  type="text"
                  value={offersNFT.contractAddress}
                  onChange={(e) => {
                      e.preventDefault();
                      setOffersNFT(current => {
                        return {
                          ...current,
                          contractAddress: e.target.value
                        }
                      })
                  }}
                  required                    
                >
                </input>
              </div>
              <div className="justify-center flex flex-row w-full border-2 border-red-500 border-soli">
                <div>
                  TOKEN ID
                </div>
                <input
                  className="ml-5 text-black text-center bg-slate-200"
                  placeholder="Input Token Id "
                  name="inputContract"
                  type="text"
                  value={offersNFT.tokenId}
                  onChange={(e) => {
                      e.preventDefault();
                      setOffersNFT(current => {
                        return {
                          ...current,
                          tokenId: e.target.value
                        }
                      })
                  }}
                  required                    
                >
                </input>
              </div>
            </div>                   
          </div>


          <div className="mt-5 flex flex-row flex-wrap w-full ">
            <div>
              <div>
                READ
              </div>
              <div>
                readcall 1
              </div>
              <div>
                readcall 2
              </div>
            </div>
          </div>
          <div className="mt-5 flex flex-row flex-wrap w-full ">
            <div>
              <div>
                INTERACT W/ EXISTING
              </div>
              <div>
                writecall 1
              </div>
              <div>
                writecall 2
              </div>
              <div>
                writecall 3
              </div>
            </div>
          </div>
          <div className="mt-5 flex flex-row flex-wrap w-full ">
            <div>
              <div>
                INTERACT W/ NEW
              </div>
              <div>
                writecall 1
              </div>
              <div>
                writecall 2
              </div>
              <div>
                writecall 3
              </div>
            </div>
          </div>
        </div>



        {/* AUCTION MODULE */}
        <div className='mt-10 border-2 border-blue-500 border-solid'>
          <div className='h-fit content-start border-2 border-blue-500 border-solid flex flex-row flex-wrap w-full'>
            <div className="text-2xl border-2 border-red-500 border-solid h-fit w-full flex flex-row justify-center">            
              AUCTIONS MODULE
            </div>
            <div className=" justify-center border-2 border-white border-solid flex flex-row h-fit w-full">
              RUN/BID ON AUCTIONS FOR NFTs
            </div>
            <div className="grid grid-cols-3 border-2 boreder-yellow-500 border-solid w-full" >
              <a className="text-center">
                DOCS
              </a>
              <a className="text-center">
                REPO
              </a>
              <a className="text-center">
                ETHERSCAN
              </a>
            </div>
          </div>

          {/* NFT RENDERING + CONTRACT INPUTS */}              
          <div className="border-2 border-solid border-blue-500 w-full h-fit flex flex-row flex-wrap justify-center "> 
            <MediaConfiguration
              networkId="1"                        
              strategy={zdkStrategyMainnet}
              strings={{
                CARD_OWNED_BY: "",
                CARD_CREATED_BY: "",                           
              }}
              style={{
                theme: {
                  previewCard: {
                    background: "black",
                    height: "200px",
                    width: "200px"                                    
                  },
                  defaultBorderRadius: 0,
                  lineSpacing: 0,
                  textBlockPadding: "0"                
                },              
              }}
            >
              <NFTPreview
                contract={auctionsNFT.contractAddress}
                id={auctionsNFT.tokenId}
                showBids={false}
                showPerpetual={false}
              />
            </MediaConfiguration> 
            <div className="w-full flex flex-row flex-wrap justify-center">
              <div className="justify-center flex flex-row w-full border-2 border-red-500 border-soli">
                <div>
                  CONTRACT ADDRESS
                </div>
                <input
                  className="ml-5 text-black text-center bg-slate-200"
                  placeholder="Input NFT Address"
                  name="inputContract"
                  type="text"
                  value={auctionsNFT.contractAddress}
                  onChange={(e) => {
                      e.preventDefault();
                      setAuctionsNFT(current => {
                        return {
                          ...current,
                          contractAddress: e.target.value
                        }
                      })
                  }}
                  required                    
                >
                </input>
              </div>
              <div className="justify-center flex flex-row w-full border-2 border-red-500 border-soli">
                <div>
                  TOKEN ID
                </div>
                <input
                  className="ml-5 text-black text-center bg-slate-200"
                  placeholder="Input Token Id "
                  name="inputContract"
                  type="text"
                  value={auctionsNFT.tokenId}
                  onChange={(e) => {
                      e.preventDefault();
                      setAuctionsNFT(current => {
                        return {
                          ...current,
                          tokenId: e.target.value
                        }
                      })
                  }}
                  required                    
                >
                </input>
              </div>
            </div>                   
          </div>

          <div className="mt-5 flex flex-row flex-wrap w-full ">
            <div>
              <div>
                READ
              </div>
              <div>
                readcall 1
              </div>
              <div>
                readcall 2
              </div>
            </div>
          </div>
          <div className="mt-5 flex flex-row flex-wrap w-full ">
            <div>
              <div>
                INTERACT W/ EXISTING
              </div>
              <div>
                writecall 1
              </div>
              <div>
                writecall 2
              </div>
              <div>
                writecall 3
              </div>
            </div>
          </div>
          <div className="mt-5 flex flex-row flex-wrap w-full ">
            <div>
              <div>
                INTERACT W/ NEW
              </div>
              <div>
                writecall 1
              </div>
              <div>
                writecall 2
              </div>
              <div>
                writecall 3
              </div>
            </div>
          </div>
        </div>        


      </main>
    </div>
  )
}

export default Protocol






// const Protocol: NextPage = () => {
//   const [userNFTs, setUserNFTs] = useState({});
//   const currentUserNFTs = userNFTs ? userNFTs: "nothing";

//   const { address: account } = useAccount(); 
//   const currentUserAddress = account ? account : ""
//   console.log("currentUseraddress: ", currentUserAddress)

//   const tokensResponse = async(args) => {
//     const response = Object.entries(await (await zdk.tokens(args)).tokens.nodes)
//     console.log("response", response)
//     console.log("userNFTs: ", userNFTs)
//     setUserNFTs(response)
//   }

//   const tokensArgs = {
//     where: {
//       ownerAddresses: [currentUserAddress]
//     },
//     pagination: {
//       limit: 10
//     },
//     includeFullDetails: false
//   }

//   useEffect(() => {
//     tokensResponse(tokensArgs)
//     },
//     []
//   )

//   useEffect(() => {
//     if(!!userNFTs) {
//     tokensResponse(tokensArgs)
//     }},
//     [currentUserAddress]
//   )


//   return (
//     <div className='flex flex-col justify-center h-screen min-h-screen'>
//       <Header />
//       <main className="flex flex-col items-center">        
//         <h1 className="text-white">
//           {`<<< ${currentUserNFTs} >>>`}
//         </h1>
//         <NFTCard nfts={currentUserNFTs} />
//         {/* <NFTCard nfts={currentUserNFTs} /> */}
//         {/* <NFTPreview
//           contract=`${userNFTs[0].token.collectionAddress}`
//           id=`${userNFTs[0].token.tokenId}`
//         /> */}
//       </main>
//     </div>
//   )
// }

// export default Protocol
